<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.elective.record.mapper.ElectiveSelectRecordMapper">

    <resultMap type="ElectiveSelectRecord" id="ElectiveSelectRecordResult">
        <result property="id" column="id"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="studentId" column="student_id"/>
        <result property="courseId" column="course_id"/>
        <result property="studentName" column="student_name"/>
        <result property="courseName" column="course_name"/>
        <result property="className" column="class_name"/>
        <result property="openId" column="open_id"/>
        <result property="openName" column="open_name"/>
    </resultMap>

    <resultMap id="ElectiveSelectStatisticResult" type="ElectiveSelectStatistic">
        <result property="courseName" column="course_name"/>
        <result property="teacherName" column="teacher_name"/>
        <result property="gradeName" column="grade_name"/>
        <result property="initNum" column="init_num"/>
        <result property="selectNum" column="select_num"/>
    </resultMap>

    <sql id="selectElectiveSelectRecordVo">
        select
            a.id,
            a.create_by,
            a.create_time,
            a.student_id,
            a.course_id,
            a.open_id,
            s.name                      as student_name,
            c.name                      as course_name,
            (select dept_name
             from sys_dept
             where dept_id = s.dept_id) as class_name,
            o.name                      as open_name
        from elective_select_record a
            left join elective_course c on c.id = a.course_id
            left join elective_student s on s.id = a.student_id
            left join elective_open_select o on o.id = a.open_id
    </sql>

    <select id="selectElectiveSelectRecordList" parameterType="ElectiveSelectRecord"
            resultMap="ElectiveSelectRecordResult">
        <include refid="selectElectiveSelectRecordVo"/>
        <where>
            c.school_id = #{schoolId}
            <if test="beginTime != null and endTime != '' and beginTime != null and endTime != ''">
                and a.create_time between #{beginTime} and #{endTime}
            </if>
            <if test="studentId != null ">and a.student_id = #{studentId}</if>
            <if test="courseId != null ">and a.course_id = #{courseId}</if>
            <if test="courseName != null and courseName != ''">and c.name like concat('%', #{courseName}, '%')</if>
            <if test="studentName != null and studentName != ''">and s.name like concat('%', #{studentName}, '%')</if>
            <if test="loginStudentId != null">and a.student_id = #{loginStudentId}</if>
            <if test="openId != null">and a.open_id = #{openId}</if>
        </where>
    </select>

    <select id="selectElectiveSelectRecordById" parameterType="Long" resultMap="ElectiveSelectRecordResult">
        <include refid="selectElectiveSelectRecordVo"/>
        where a.id = #{id}
    </select>

    <select id="listCanSelect" parameterType="ElectiveSelectRecord" resultMap="ElectiveSelectRecordResult">
        select
            c.name as course_name,
            c.id   as course_id
        from elective_course_people p
            inner join elective_course c on p.course_id = c.id
        where c.school_id = #{schoolId}
              and (p.init_num - p.select_num) &gt; 0
              and p.grade_id = (select parent_id
                                from sys_dept
                                where sys_dept.dept_id = (select elective_student.dept_id
                                                          from elective_student
                                                          where elective_student.id = #{studentId}))
              and c.status = '1'
              and c.semester_id = (select semester_id
                                   from elective_open_select
                                   where elective_open_select.id = #{openId})
    </select>
    <!--and c.semester_id = (select semester_id
                             from elective_open_select
                             where status = '1'
                                   and open_time &lt; current_date()
                                   and close_time &gt; current_date()
                             order by id desc
                             limit 1)-->

    <!-- TODO 有点复杂 一时半会写不好这个SQL -->
    <select id="listStatistic" parameterType="ElectiveSelectStatistic" resultMap="ElectiveSelectStatisticResult">
        select
            c.name                      as courseName,
            (select t.name
             from elective_teacher t
             where t.id = c.teacher_id) as teacher_name,
            count()                     as select_num
        from elective_course c
            left join elective_open_select o on c.semester_id = o.semester_id
            left join elective_course_people p on p.course_id = c.id
    </select>

    <insert id="insertElectiveSelectRecord" parameterType="ElectiveSelectRecord" useGeneratedKeys="true"
            keyProperty="id">
        insert into elective_select_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="createBy != null  and createBy != ''">create_by,</if>
            <if test="createTime != null ">create_time,</if>
            <if test="studentId != null ">student_id,</if>
            <if test="courseId != null ">course_id,</if>
            <if test="openId != null ">open_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="createBy != null  and createBy != ''">#{createBy},</if>
            <if test="createTime != null ">#{createTime},</if>
            <if test="studentId != null ">#{studentId},</if>
            <if test="courseId != null ">#{courseId},</if>
            <if test="openId != null ">#{openId},</if>
        </trim>
    </insert>

    <update id="updateElectiveSelectRecord" parameterType="ElectiveSelectRecord">
        update elective_select_record
        <trim prefix="SET" suffixOverrides=",">
            <if test="createBy != null  and createBy != ''">create_by = #{createBy},</if>
            <if test="createTime != null ">create_time = #{createTime},</if>
            <if test="studentId != null ">student_id = #{studentId},</if>
            <if test="courseId != null ">course_id = #{courseId},</if>
            <if test="openId != null ">open_id = #{openId},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteElectiveSelectRecordById" parameterType="Long">
        delete from elective_select_record
        where id = #{id}
    </delete>

    <delete id="deleteElectiveSelectRecordByIds" parameterType="String">
        delete from elective_select_record where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>